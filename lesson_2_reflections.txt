What happens when you initialize a repository? Why do you need to do it?
	When you intialize a repository git now is able to track the changes made to the files in that repository. Before you can start making commits you need to set up the repository so Git can work properly

How is the staging area different from the working directory and the repository? What value do you think it offers?
	The staging area only contains the files within the repository that the user wishes to "commit" - I think it is useful because it makes the user think about what changes they made and which files have been affected.

How can you use the staging area to make sure you have on commit per logical change?
	Using git diff will help me confirm the number of changes I have made to the file since the last commit. If I see multiple lines of code changed that affect different functions in the program then I know I did not just make one logical change.

What are some situation when branches would be helpful in keeping your history organized? How would branches help?
	If I were about to try out some crazy code that might not work and also might lead me down a crazy path of additional changes I think I should start a new branch. That way I can always go back to the "normal" code. Branches would allow me to know exactly where I was when I started this crazy path so I can reset my code instantly.

How do diagrams help you visualize the branch structure?
	Diagrams show me what data can be accessed from different branches. If a commit does not have a branch you must use the commit id to access it because it will not be available from any other branch. Otherwise you can view all the "parents" for each commit and branch using git log.