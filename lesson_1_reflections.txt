How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    The computer found the change and showed me the two lines - it was easier for me to detect the exact change by comparing less lines of code.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Too easily see what code worked and what caused it to break.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Manually choosing to save allows you to separate your commits by "logical changes" which makes them easier to understand. However manually choosing when to commit could lead to committing either too frequently or too rarely. Automatically saving versions of your file is safer - meaning that you will always have a backup even if you forget to save. However because you can't choose when to save the version some of your code might not even compile.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Saving each file separately might work for files that are not connected with other files. However sometimes a project or component of a project will depend on multiple files that are connected so saving or committing them all at once will make version control more useful because you don't have to figure out which committs for each individual file correspond to the change you are reverting back to.

How can you use the commands git log and git diff to view the history of files?

    "git log" is used to navigate through all of the commits for files but you can only see the quick message on what was changed in that commit. While "git diff" is used to compare commits so that you can find exactly what is different between the two commits.

How might using version control make you more confident to make changes that
could break something?

    It is very easy to revert back to older versions of the file(s) you are working on so you can revert back to the last version that worked in case you break something.

Now that you have your workspace set up, what do you want to try using Git for?

    I would like to use Git to save my work more effectively - meaning that I can save multiple versions of the same file instead of in different files with different file names. Hopefully this will make me more organized.